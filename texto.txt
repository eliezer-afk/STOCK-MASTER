describe('PATCH/api/product/:id',() =>{
    it('should return a 404 response a non-existing product',async() => {
        const productId=2000
        const response = await request(serverInstance).patch(`/api/products/${productId}`)

        expect(response.status).toBe(404)
        expect(response.body.error).toBe("Producto no encontrado")
        expect(response.status).not.toBe(200)
        expect(response.body).not.toHaveProperty('data')

        it('should update the product availability', async() =>{
            const response = await request(serverInstance).patch('/api/products/1')
            expect(response.status).toBe(200)
            expect(response.body).toHaveProperty('data')
            expect(response.body.data.availability).toBe(false)

            expect(response.status).not.toBe(400)
            expect(response.status).not.toBe(204)
            expect(response.body).not.toHaveProperty('error')

        })

    })
})

/** @type {import('ts-jest').JestConfigWithTsJest} **/
module.exports = {
  testEnvironment: "node",
  transform: {
    "^.+.tsx?$": ["ts-jest",{}],
  },
};